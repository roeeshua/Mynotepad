HTMLHighlighter
--------------------------------------------------
#include "htmlhighlighter.h"

HTMLHighlighter::HTMLHighlighter(QTextDocument *parent) : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    // 标签格式
    tagFormat.setForeground(Qt::darkBlue);
    tagFormat.setFontWeight(QFont::Bold);
    rule.pattern = QRegularExpression("<\\s*\\/?(\\w+)");
    rule.format = tagFormat;
    highlightingRules.append(rule);

    // 属性格式
    attributeFormat.setForeground(Qt::darkRed);
    rule.pattern = QRegularExpression("\\b[A-Za-z0-9_]+(?=\\=)");
    rule.format = attributeFormat;
    highlightingRules.append(rule);

    // 属性值格式
    valueFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression("\".*?\"");
    rule.format = valueFormat;
    highlightingRules.append(rule);

    // 注释格式
    commentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression("<!--.*?-->");
    rule.format = commentFormat;
    highlightingRules.append(rule);
}

void HTMLHighlighter::highlightBlock(const QString &text)
{
    foreach (const HighlightingRule &rule, highlightingRules) {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text);
        while (matchIterator.hasNext()) {
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format);
        }
    }
}


HTMLHighlighter
--------------------------------------------------
#ifndef HTMLHIGHLIGHTER_H
#define HTMLHIGHLIGHTER_H

#include <QSyntaxHighlighter>
#include <QRegularExpression>

class HTMLHighlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    HTMLHighlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &text) override;

private:
    struct HighlightingRule
    {
        QRegularExpression pattern;
        QTextCharFormat format;
    };
    QVector<HighlightingRule> highlightingRules;

    QTextCharFormat tagFormat;
    QTextCharFormat attributeFormat;
    QTextCharFormat valueFormat;
    QTextCharFormat commentFormat;
};

#endif // HTMLHIGHLIGHTER_H


JavaScriptHighlighter
--------------------------------------------------
#include "javascripthighlighter.h"

JavaScriptHighlighter::JavaScriptHighlighter(QTextDocument *parent) : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    // 关键字格式
    keywordFormat.setForeground(Qt::darkBlue);
    keywordFormat.setFontWeight(QFont::Bold);
    QStringList keywordPatterns;
    keywordPatterns << "\\bvar\\b" << "\\blet\\b" << "\\bconst\\b"
                    << "\\bfunction\\b" << "\\bif\\b" << "\\belse\\b"
                    << "\\bfor\\b" << "\\bwhile\\b" << "\\breturn\\b"
                    << "\\bbreak\\b" << "\\bcontinue\\b" << "\\bnew\\b"
                    << "\\btry\\b" << "\\bcatch\\b" << "\\bfinally\\b"
                    << "\\bthrow\\b" << "\\bdelete\\b" << "\\btypeof\\b"
                    << "\\binstanceof\\b" << "\\bdefault\\b" << "\\bimport\\b"
                    << "\\bexport\\b" << "\\bclass\\b" << "\\bextends\\b"
                    << "\\bstatic\\b" << "\\bsuper\\b";
    foreach (const QString &pattern, keywordPatterns) {
        rule.pattern = QRegularExpression(pattern);
        rule.format = keywordFormat;
        highlightingRules.append(rule);
    }

    // 类名格式
    classFormat.setFontWeight(QFont::Bold);
    classFormat.setForeground(Qt::darkMagenta);
    rule.pattern = QRegularExpression("\\bclass\\b\\s+([A-Za-z_][A-Za-z0-9_]*)");
    rule.format = classFormat;
    highlightingRules.append(rule);

    // 函数名格式
    functionFormat.setFontItalic(true);
    functionFormat.setForeground(Qt::blue);
    rule.pattern = QRegularExpression("\\bfunction\\b\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(");
    rule.format = functionFormat;
    highlightingRules.append(rule);

    // 单行注释格式
    singleLineCommentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression("//[^\n]*");
    rule.format = singleLineCommentFormat;
    highlightingRules.append(rule);

    // 多行注释格式
    multiLineCommentFormat.setForeground(Qt::red);

    // 字符串格式
    quotationFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression("\".*\"");
    rule.format = quotationFormat;
    highlightingRules.append(rule);
}

void JavaScriptHighlighter::highlightBlock(const QString &text)
{
    foreach (const HighlightingRule &rule, highlightingRules) {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text);
        while (matchIterator.hasNext()) {
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format);
        }
    }

    setCurrentBlockState(0);

    // 多行注释
    int startIndex = 0;
    if (previousBlockState() != 1)
        startIndex = text.indexOf(QRegularExpression("/\\*"));

    while (startIndex >= 0) {
        QRegularExpressionMatch match = QRegularExpression("\\*/").match(text, startIndex);
        int endIndex = match.capturedStart();
        int commentLength = 0;
        if (endIndex == -1) {
            setCurrentBlockState(1);
            commentLength = text.length() - startIndex;
        } else {
            commentLength = endIndex - startIndex + match.capturedLength();
        }
        setFormat(startIndex, commentLength, multiLineCommentFormat);
        startIndex = text.indexOf(QRegularExpression("/\\*"), startIndex + commentLength);
    }
}


JavaScriptHighlighter
--------------------------------------------------
#ifndef JAVASCRIPTHIGHLIGHTER_H
#define JAVASCRIPTHIGHLIGHTER_H

#include <QSyntaxHighlighter>
#include <QRegularExpression>

class JavaScriptHighlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    JavaScriptHighlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &text) override;

private:
    struct HighlightingRule
    {
        QRegularExpression pattern;
        QTextCharFormat format;
    };
    QVector<HighlightingRule> highlightingRules;

    QTextCharFormat keywordFormat;
    QTextCharFormat classFormat;
    QTextCharFormat functionFormat;
    QTextCharFormat singleLineCommentFormat;
    QTextCharFormat multiLineCommentFormat;
    QTextCharFormat quotationFormat;
};

#endif // JAVASCRIPTHIGHLIGHTER_H


aboutdialog
--------------------------------------------------
#include "aboutdialog.h"
#include "ui_aboutdialog.h"
#include <QPlainTextEdit>

AboutDialog::AboutDialog(QWidget *parent)
    : QDialog(parent)
    , ui(new Ui::AboutDialog)
{
    ui->setupUi(this);
}

AboutDialog::~AboutDialog()
{
    delete ui;
}


aboutdialog
--------------------------------------------------
#ifndef ABOUTDIALOG_H
#define ABOUTDIALOG_H

#include <QDialog>

namespace Ui {
class AboutDialog;
}

class AboutDialog : public QDialog
{
    Q_OBJECT

public:
    explicit AboutDialog(QWidget *parent = nullptr);
    ~AboutDialog();

private:
    Ui::AboutDialog *ui;
};

#endif // ABOUTDIALOG_H


aboutdialog
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>AboutDialog</class>
 <widget class="QDialog" name="AboutDialog">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>433</width>
    <height>313</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>关于</string>
  </property>
  <property name="windowIcon">
   <iconset theme="QIcon::ThemeIcon::HelpAbout"/>
  </property>
  <widget class="QDialogButtonBox" name="buttonBox">
   <property name="geometry">
    <rect>
     <x>30</x>
     <y>240</y>
     <width>341</width>
     <height>32</height>
    </rect>
   </property>
   <property name="orientation">
    <enum>Qt::Orientation::Horizontal</enum>
   </property>
   <property name="standardButtons">
    <set>QDialogButtonBox::StandardButton::Ok</set>
   </property>
  </widget>
  <widget class="QLabel" name="label">
   <property name="geometry">
    <rect>
     <x>40</x>
     <y>0</y>
     <width>331</width>
     <height>91</height>
    </rect>
   </property>
   <property name="font">
    <font>
     <pointsize>22</pointsize>
    </font>
   </property>
   <property name="text">
    <string>戈仑石人文本编辑器</string>
   </property>
  </widget>
  <widget class="QLabel" name="label_5">
   <property name="geometry">
    <rect>
     <x>30</x>
     <y>100</y>
     <width>121</width>
     <height>131</height>
    </rect>
   </property>
   <property name="styleSheet">
    <string notr="true">border-image: url(:/img/OIP-C.jpg);</string>
   </property>
   <property name="text">
    <string/>
   </property>
  </widget>
  <widget class="QWidget" name="layoutWidget">
   <property name="geometry">
    <rect>
     <x>200</x>
     <y>100</y>
     <width>208</width>
     <height>73</height>
    </rect>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout">
    <item>
     <widget class="QLabel" name="label_2">
      <property name="text">
       <string>开发者：黄展鸿</string>
      </property>
     </widget>
    </item>
    <item>
     <widget class="QLabel" name="label_3">
      <property name="text">
       <string>学号：2022414120109</string>
      </property>
     </widget>
    </item>
    <item>
     <widget class="QLabel" name="label_4">
      <property name="text">
       <string>邮箱：2167404866@qq.com</string>
      </property>
     </widget>
    </item>
   </layout>
  </widget>
 </widget>
 <resources/>
 <connections>
  <connection>
   <sender>buttonBox</sender>
   <signal>accepted()</signal>
   <receiver>AboutDialog</receiver>
   <slot>accept()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>248</x>
     <y>254</y>
    </hint>
    <hint type="destinationlabel">
     <x>157</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
  <connection>
   <sender>buttonBox</sender>
   <signal>rejected()</signal>
   <receiver>AboutDialog</receiver>
   <slot>reject()</slot>
   <hints>
    <hint type="sourcelabel">
     <x>316</x>
     <y>260</y>
    </hint>
    <hint type="destinationlabel">
     <x>286</x>
     <y>274</y>
    </hint>
   </hints>
  </connection>
 </connections>
</ui>


codeeditor
--------------------------------------------------
#include "codeeditor.h"
#include "cxxhighlighter.h"
#include "pythonhighlighter.h"
#include "javascripthighlighter.h"
#include "htmlhighlighter.h"
#include<QPainter>
#include<QTextBlock>

    CodeEditor::CodeEditor(QWidget *parent,const QString &fileType) : QPlainTextEdit(parent)
    {
        lineNumberArea = new LineNumberArea(this);

        if (fileType == "cpp" || fileType == "c") {
            highlighter = new CxxHighlighter(document());
        } else if (fileType == "py") {
            highlighter = new PythonHighlighter(document());
        } else if (fileType == "js") {
            highlighter = new JavaScriptHighlighter(document());
        } else if (fileType == "html") {
            highlighter = new HTMLHighlighter(document());
        } else {
            highlighter = nullptr; // 默认不进行高亮
        }

        hyperlinkHighlighter = new HyperlinkHighlighter(document());
        connect(hyperlinkHighlighter, &HyperlinkHighlighter::hyperlinkActivated, this, &CodeEditor::hyperlinkActivated);

        lineNumberArea = new LineNumberArea(this);

        connect(this, &CodeEditor::blockCountChanged, this, &CodeEditor::updateLineNumberAreaWidth);
        connect(this, &CodeEditor::updateRequest, this, &CodeEditor::updateLineNumberArea);
        connect(this, &CodeEditor::cursorPositionChanged, this, &CodeEditor::highlightCurrentLine);

        updateLineNumberAreaWidth(0);
        highlightCurrentLine();
    }

    void CodeEditor::mousePressEvent(QMouseEvent *event)
    {
        QTextCursor cursor = cursorForPosition(event->pos());
        QTextBlock block = cursor.block();
        QString text = block.text();

        // 添加调试输出
        qDebug() << "Mouse clicked at position:" << event->pos();

        // 检测超链接
        QRegularExpression urlPattern("(https?://|ftp://|mailto:)[^\\s]+");
        QRegularExpressionMatch match = urlPattern.match(text, cursor.positionInBlock());
        if (match.hasMatch()) {
            emit hyperlinkActivated(QUrl(match.captured()));
        } else {
            QPlainTextEdit::mousePressEvent(event);
        }
    }

    int CodeEditor::lineNumberAreaWidth()
    {
        int digits = 1;
        int max = qMax(1, blockCount());
        while (max >= 10) {
            max /= 10;
            ++digits;
        }

        int space = 3 + fontMetrics().horizontalAdvance(QLatin1Char('9')) * digits;

        return space;
    }

    void CodeEditor::updateLineNumberAreaWidth(int /* newBlockCount */)
    {
        setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);
    }

    void CodeEditor::updateLineNumberArea(const QRect &rect, int dy)
    {
        if (dy)
            lineNumberArea->scroll(0, dy);
        else
            lineNumberArea->update(0, rect.y(), lineNumberArea->width(), rect.height());

        if (rect.contains(viewport()->rect()))
            updateLineNumberAreaWidth(0);
    }

    void CodeEditor::HLNA(bool flag)
    {
        if(flag){
            lineNumberArea->hide();
            setViewportMargins(0, 0, 0, 0);
        }
        else{
            lineNumberArea->show();
            setViewportMargins(lineNumberAreaWidth(), 0, 0, 0);
        }
    }

    void CodeEditor::resizeEvent(QResizeEvent *e)
    {
        QPlainTextEdit::resizeEvent(e);

        QRect cr = contentsRect();
        lineNumberArea->setGeometry(QRect(cr.left(), cr.top(), lineNumberAreaWidth(), cr.height()));
    }

    void CodeEditor::highlightCurrentLine()
    {
        QList<QTextEdit::ExtraSelection> extraSelections;

        if (!isReadOnly()) {
            QTextEdit::ExtraSelection selection;

            QColor lineColor = QColor(Qt::yellow).lighter(160);

            selection.format.setBackground(lineColor);
            selection.format.setProperty(QTextFormat::FullWidthSelection, true);
            selection.cursor = textCursor();
            selection.cursor.clearSelection();
            extraSelections.append(selection);
        }

        setExtraSelections(extraSelections);
    }

    void CodeEditor::lineNumberAreaPaintEvent(QPaintEvent *event)
    {
        QPainter painter(lineNumberArea);
        painter.fillRect(event->rect(), Qt::lightGray);
        QTextBlock block = firstVisibleBlock();
        int blockNumber = block.blockNumber();
        int top = qRound(blockBoundingGeometry(block).translated(contentOffset()).top());
        int bottom = top + qRound(blockBoundingRect(block).height());
        while (block.isValid() && top <= event->rect().bottom()) {
            if (block.isVisible() && bottom >= event->rect().top()) {
                QString number = QString::number(blockNumber + 1);
                painter.setPen(Qt::black);
                painter.drawText(0, top, lineNumberArea->width(), fontMetrics().height(),
                                 Qt::AlignRight, number);
            }

            block = block.next();
            top = bottom;
            bottom = top + qRound(blockBoundingRect(block).height());
            ++blockNumber;
        }
    }



codeeditor
--------------------------------------------------
#ifndef CODEEDITOR_H
#define CODEEDITOR_H
#include <QSyntaxHighlighter>
#include <QString>
#include<QPlainTextEdit>
#include "cxxhighlighter.h"
#include <QTextCursor>
#include <QTextBlock>
#include "hyperlinkhighlighter.h"

class CodeEditor : public QPlainTextEdit
{
    Q_OBJECT

public:
    CodeEditor(QWidget *parent = nullptr, const QString &fileType = "");

    void lineNumberAreaPaintEvent(QPaintEvent *event);
    int lineNumberAreaWidth();

protected:
    void resizeEvent(QResizeEvent *event) override;
    void mousePressEvent(QMouseEvent *event) override; // 重写鼠标点击事件

private slots:
    void updateLineNumberAreaWidth(int newBlockCount);
    void highlightCurrentLine();
    void updateLineNumberArea(const QRect &rect, int dy);

public slots:
    void HLNA(bool flag);

private:
    QWidget *lineNumberArea;
    QSyntaxHighlighter *highlighter; // 添加语法高亮器
    HyperlinkHighlighter *hyperlinkHighlighter; // 添加超链接高亮器

signals:
    void hyperlinkActivated(const QUrl &url); // 添加信号声明
};

class LineNumberArea : public QWidget
{
public:
    LineNumberArea(CodeEditor *editor) : QWidget(editor), codeEditor(editor)
    {}

    QSize sizeHint() const override
    {
        return QSize(codeEditor->lineNumberAreaWidth(), 0);
    }

protected:
    void paintEvent(QPaintEvent *event) override
    {
        codeEditor->lineNumberAreaPaintEvent(event);
    }

private:
    CodeEditor *codeEditor;
};

#endif // CODEEDITOR_H


cxxhighlighter
--------------------------------------------------
#include "cxxhighlighter.h"

CxxHighlighter::CxxHighlighter(QTextDocument *parent) : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    // 关键字格式
    keywordFormat.setForeground(Qt::darkBlue);
    keywordFormat.setFontWeight(QFont::Bold);
    QStringList keywordPatterns;
    keywordPatterns << "\\bchar\\b" << "\\bclass\\b" << "\\bconst\\b"
                    << "\\bdouble\\b" << "\\benum\\b" << "\\bexplicit\\b"
                    << "\\bfriend\\b" << "\\binline\\b" << "\\bint\\b"
                    << "\\blong\\b" << "\\bnamespace\\b" << "\\boperator\\b"
                    << "\\bprivate\\b" << "\\bprotected\\b" << "\\bpublic\\b"
                    << "\\bshort\\b" << "\\bsignals\\b" << "\\bsigned\\b"
                    << "\\bslots\\b" << "\\bstatic\\b" << "\\bstruct\\b"
                    << "\\btemplate\\b" << "\\btypedef\\b" << "\\btypename\\b"
                    << "\\bunion\\b" << "\\bunsigned\\b" << "\\bvirtual\\b" << "\\bvoid\\b"
                    << "\\bvolatile\\b";
    foreach (const QString &pattern, keywordPatterns) {
        rule.pattern = QRegularExpression(pattern);
        rule.format = keywordFormat;
        highlightingRules.append(rule);
    }

    // 类名格式
    classFormat.setFontWeight(QFont::Bold);
    classFormat.setForeground(Qt::darkMagenta);
    rule.pattern = QRegularExpression("\\bQ[A-Za-z]+\\b");
    rule.format = classFormat;
    highlightingRules.append(rule);

    // 单行注释格式
    singleLineCommentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression("//[^\n]*");
    rule.format = singleLineCommentFormat;
    highlightingRules.append(rule);

    // 多行注释格式
    multiLineCommentFormat.setForeground(Qt::red);

    // 字符串格式
    quotationFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression("\".*\"");
    rule.format = quotationFormat;
    highlightingRules.append(rule);

    // 函数格式
    functionFormat.setFontItalic(true);
    functionFormat.setForeground(Qt::blue);
    rule.pattern = QRegularExpression("\\b[A-Za-z0-9_]+(?=\\()");
    rule.format = functionFormat;
    highlightingRules.append(rule);
}

void CxxHighlighter::highlightBlock(const QString &text)
{
    foreach (const HighlightingRule &rule, highlightingRules) {
        QRegularExpressionMatchIterator matchIterator = rule.pattern.globalMatch(text);
        while (matchIterator.hasNext()) {
            QRegularExpressionMatch match = matchIterator.next();
            setFormat(match.capturedStart(), match.capturedLength(), rule.format);
        }
    }

    setCurrentBlockState(0);

    // 多行注释
    int startIndex = 0;
    if (previousBlockState() != 1)
        startIndex = text.indexOf(QRegularExpression("/\\*"));

    while (startIndex >= 0) {
        QRegularExpressionMatch match = QRegularExpression("\\*/").match(text, startIndex);
        int endIndex = match.capturedStart();
        int commentLength = 0;
        if (endIndex == -1) {
            setCurrentBlockState(1);
            commentLength = text.length() - startIndex;
        } else {
            commentLength = endIndex - startIndex + match.capturedLength();
        }
        setFormat(startIndex, commentLength, multiLineCommentFormat);
        startIndex = text.indexOf(QRegularExpression("/\\*"), startIndex + commentLength);
    }
}


cxxhighlighter
--------------------------------------------------
#ifndef CXXHIGHLIGHTER_H
#define CXXHIGHLIGHTER_H

#include <QSyntaxHighlighter>
#include <QRegularExpression>

class CxxHighlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    CxxHighlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &text) override;

private:
    struct HighlightingRule
    {
        QRegularExpression pattern;
        QTextCharFormat format;
    };
    QVector<HighlightingRule> highlightingRules;

    QTextCharFormat keywordFormat;
    QTextCharFormat classFormat;
    QTextCharFormat singleLineCommentFormat;
    QTextCharFormat multiLineCommentFormat;
    QTextCharFormat quotationFormat;
    QTextCharFormat functionFormat;
};

#endif // CXXHIGHLIGHTER_H


hyperlinkhighlighter
--------------------------------------------------
// hyperlinkhighlighter.cpp
#include "hyperlinkhighlighter.h"
#include <QTextCharFormat>
#include <QTextCursor>
#include <QUrl>

HyperlinkHighlighter::HyperlinkHighlighter(QTextDocument *parent)
    : QSyntaxHighlighter(parent)
{
}

void HyperlinkHighlighter::highlightBlock(const QString &text)
{
    QRegularExpression urlPattern("(https?://|ftp://|mailto:)[^\\s]+");
    QRegularExpressionMatchIterator matchIterator = urlPattern.globalMatch(text);
    while (matchIterator.hasNext()) {
        QRegularExpressionMatch match = matchIterator.next();
        QTextCharFormat linkFormat;
        linkFormat.setForeground(Qt::blue);
        linkFormat.setFontUnderline(true);
        setFormat(match.capturedStart(), match.capturedLength(), linkFormat);

        // 发出信号
        QTextCursor cursor(document());
        cursor.setPosition(match.capturedStart() + currentBlock().position());
        cursor.setPosition(match.capturedStart() + currentBlock().position() + match.capturedLength(), QTextCursor::KeepAnchor);
        emit hyperlinkActivated(QUrl(match.captured()));
    }
}


hyperlinkhighlighter
--------------------------------------------------
// hyperlinkhighlighter.h
#ifndef HYPERLINKHIGHLIGHTER_H
#define HYPERLINKHIGHLIGHTER_H

#include <QSyntaxHighlighter>
#include <QRegularExpression>

class HyperlinkHighlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    HyperlinkHighlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &text) override;

signals:
    void hyperlinkActivated(const QUrl &url);
};

#endif // HYPERLINKHIGHLIGHTER_H


main
--------------------------------------------------
#include "mainwindow.h"

#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    MainWindow w;
    w.show();
    return a.exec();
}


mainwindow
--------------------------------------------------
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "aboutdialog.h"
#include "searchdialog.h"
#include "replacedialog.h"
#include "QFileDialog.h"
#include "QColorDialog.h"
#include <QMessageBox>
#include <QTextStream>
#include "QFontDialog.h"
#include <QClipboard>
#include <QFile>
#include <QDesktopServices>
#include <QUrl>

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent)
    , ui(new Ui::MainWindow)
    ,isDarkTheme(false) // 初始化为浅色模式
{
    ui->setupUi(this);

    // 连接主题切换信号
    connect(ui->actionToggleTheme, &QAction::triggered, this, &MainWindow::switchTheme);

    QClipboard *clipboard = QApplication::clipboard();
    connect(clipboard, &QClipboard::dataChanged, this, &MainWindow::updatePasteAction);
    tabWidget = new QTabWidget(this);

    connect(tabWidget, &QTabWidget::currentChanged, this, &MainWindow::updateEditorActions);
    setCentralWidget(tabWidget);
    tabWidget->setTabsClosable(true);
    connect(tabWidget, &QTabWidget::tabCloseRequested, this, &MainWindow::on_tabCloseRequested);

    textchanged = false;
    on_actionNew_triggered();

    statusLabel.setMaximumWidth(180);
    statusLabel.setText("length:"+QString::number(0)+"   lines:"+QString::number(1));
    ui->statusBar->addPermanentWidget(&statusLabel);

    statusCursorLabel.setMaximumWidth(180);
    statusCursorLabel.setText("Ln:"+QString::number(0)+"   Col:"+QString::number(1));
    ui->statusBar->addPermanentWidget(&statusCursorLabel);

    QLabel *auther=new QLabel(ui->statusBar);
    auther->setText("黄展鸿");
    ui->statusBar->addPermanentWidget(auther);

    ui->actionCopy->setEnabled(false);
    ui->actCut->setEnabled(false);
    ui->actionRedo->setEnabled(false);
    ui->actionUndo->setEnabled(false);
    ui->actionPaste->setEnabled(false);

    QPlainTextEdit::LineWrapMode mode=currentEditor()->lineWrapMode();

    ui->actionUneWrap->setChecked(true);

    ui->actionShowToolbar->setChecked(true);
    ui->actionShowstatusbar->setChecked(true);

    ui->actionShowLineNumber->setChecked(false);
    on_actionShowLineNumber_triggered(false);

    // 获取当前的 CodeEditor 实例
    CodeEditor *editor = qobject_cast<CodeEditor*>(tabWidget->currentWidget());
    if (editor) {
        connect(editor, &CodeEditor::hyperlinkActivated, this, &MainWindow::on_hyperlinkActivated);
        qDebug() << "Connected hyperlinkActivated signal to slot";
    }
}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::on_hyperlinkActivated(const QUrl &url)
{
    qDebug() << "Hyperlink activated:" << url.toString();
    QDesktopServices::openUrl(url);
}

void MainWindow::switchTheme(){
    QFile file;
    if (isDarkTheme) {
        file.setFileName("F:/QT/Mynotepad/style/light.qss");
        isDarkTheme = false;
        QMessageBox::warning(this, "11", "切换为浅色模式");
    } else {
        file.setFileName("F:/QT/Mynotepad/style/dark.qss");
        isDarkTheme = true;
        QMessageBox::warning(this, "11", "切换为深色模式");
    }

    if (!file.open(QFile::ReadOnly | QFile::Text)) {
        QMessageBox::warning(this, "主题切换失败", "无法加载样式表");
        return;
    }

    QTextStream ts(&file);
    QString styleSheet = ts.readAll();
    qApp->setStyleSheet(styleSheet);
    file.close();
}

void MainWindow::updateEditorActions()
{
    CodeEditor *editor = currentEditor();
    bool hasEditor = (editor != nullptr);

    ui->actionCopy->setEnabled(hasEditor);
    ui->actCut->setEnabled(hasEditor);
    ui->actionPaste->setEnabled(hasEditor);
    ui->actionRedo->setEnabled(hasEditor);
    ui->actionUndo->setEnabled(hasEditor);

    if (editor) {
        connect(editor, &QPlainTextEdit::copyAvailable, ui->actionCopy, &QAction::setEnabled);
        connect(editor, &QPlainTextEdit::copyAvailable, ui->actCut, &QAction::setEnabled);
        connect(editor, &QPlainTextEdit::textChanged, this, &MainWindow::on_TextChanged);
        connect(editor, &QPlainTextEdit::undoAvailable, ui->actionUndo, &QAction::setEnabled);
        connect(editor, &QPlainTextEdit::redoAvailable, ui->actionRedo, &QAction::setEnabled);
    }
}

void MainWindow::on_TextChanged()
{
    // 根据当前的编辑器更新窗口标题或其他状态
    setWindowTitle("*修改中 - MyNotepad");
}

void MainWindow::updatePasteAction()
{
    QClipboard *clipboard = QApplication::clipboard();
    ui->actionPaste->setEnabled(!clipboard->text().isEmpty());
}

void MainWindow::on_actionAbout_triggered()
{
    AboutDialog dlg;
    dlg.exec();
}


void MainWindow::on_actionFind_triggered()
{
    CodeEditor *editor = currentEditor();
    if (!editor) {
        QMessageBox::warning(this, "错误", "当前没有可用的编辑器");
        return;
    }

    SearchDialog dlg(this, editor);
    dlg.exec();
}


void MainWindow::on_actionReplace_triggered()
{
    CodeEditor *editor = currentEditor();
    if (!editor) {
        QMessageBox::warning(this, "错误", "当前没有可用的编辑器");
        return;
    }

    ReplaceDialog dlg(this, editor);
    dlg.exec();
}


void MainWindow::on_actionNew_triggered()
{
    CodeEditor *editor = new CodeEditor(this);
    int index = tabWidget->addTab(editor, "未命名文件");
    tabWidget->setCurrentIndex(index);
}

CodeEditor* MainWindow::currentEditor()
{
    return qobject_cast<CodeEditor*>(tabWidget->currentWidget());
}


void MainWindow::on_actionOpen_triggered()
{
    QString filename = QFileDialog::getOpenFileName(this, "打开文件", ".", "All Files (*)");
    if (filename.isEmpty())
        return;

    QFile file(filename);
    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
        QMessageBox::warning(this, "错误", "无法打开文件");
        return;
    }

    QString fileType = QFileInfo(filename).suffix().toLower(); // 获取文件扩展名
    CodeEditor *editor = new CodeEditor(this, fileType); // 根据文件类型创建编辑器
    editor->setPlainText(file.readAll());
    int index = tabWidget->addTab(editor, QFileInfo(filename).fileName());
    tabWidget->setCurrentIndex(index);
    file.close();
}


void MainWindow::on_actionSave_triggered()
{
    CodeEditor *editor = currentEditor();
    if (!editor)
        return;

    QString filename = QFileDialog::getSaveFileName(this, "保存文件", ".", "Text files (*.txt)");
    if (filename.isEmpty())
        return;

    QFile file(filename);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        QMessageBox::warning(this, "错误", "无法保存文件");
        return;
    }
    QTextStream out(&file);
    out << editor->toPlainText();
    file.close();

    tabWidget->setTabText(tabWidget->currentIndex(), QFileInfo(filename).fileName());
}

void MainWindow::on_tabCloseRequested(int index)
{
    QWidget *widget = tabWidget->widget(index);
    tabWidget->removeTab(index);
    widget->deleteLater();
}


void MainWindow::on_actionSaveAs_triggered()
{
    QString filename =QFileDialog::getSaveFileName(this,"保存文件",".",tr("Text files (*.txt)"));

    QFile file(filename);
    if(!file.open(QFile::WriteOnly | QFile::Text)){
        QMessageBox::warning(this,"..","打开保存文件失败");
        return;
    }

    filePath=filename;
    QTextStream out (&file);
    QString text =currentEditor()->toPlainText();
    out<<text;
    file.flush();
    file.close();

    this->setWindowTitle(QFileInfo(filePath).absoluteFilePath());
}

bool MainWindow::userEditConfirmed()
{
    if(textchanged){

        QString path = (filePath!="")?filePath:"无标题.txt";
        QMessageBox msg(this);
        msg.setIcon(QMessageBox::Question);
        msg.setWindowTitle("...");
        msg.setWindowFlag(Qt::Drawer);
        msg.setText(QString("是否将更改保存到\n")+"\""+path+"\"?");
        msg.setStandardButtons(QMessageBox::Yes|QMessageBox::No|QMessageBox::Cancel);
        int r = msg.exec();
        switch(r){
        case QMessageBox::Yes:
            on_actionSave_triggered();
            break;
        case QMessageBox::No:
            textchanged=false;
            break;
        case QMessageBox::Cancel:
            return false;
        }
    }
    return true;
}

void MainWindow::on_actionUndo_triggered()
{
    CodeEditor *editor = currentEditor();
    if (editor) {
        editor->undo();
    }
}

void MainWindow::on_actCut_triggered()
{
    CodeEditor *editor = currentEditor();
    if (editor) {
        editor->cut();
    }
}


void MainWindow::on_actionCopy_triggered()
{
    CodeEditor *editor = currentEditor();
    if (editor) {
        editor->copy();
    }
}

void MainWindow::on_actionPaste_triggered()
{
    CodeEditor *editor = currentEditor();
    if (editor) {
        editor->paste();
    }
}


void MainWindow::on_actionRedo_triggered()
{
    CodeEditor *editor = currentEditor();
    if (editor) {
        editor->redo();
    }
}

void MainWindow::on_actionFontColor_triggered()
{
    QColor fcolor =QColorDialog::getColor(Qt::black,this,"设置字体颜色");
    if(fcolor.isValid()){
        currentEditor()->setStyleSheet(QString("QPlainTextEdit {color: %1}").arg(fcolor.name()));
    }
}


void MainWindow::on_actionEditorBackground_triggered()
{
    QColor bcolor =QColorDialog::getColor(Qt::black,this,"设置背景颜色");
    if(bcolor.isValid()){
        currentEditor()->setStyleSheet(QString("QPlainTextEdit {background-color: %1}").arg(bcolor.name()));
    }
}

void MainWindow::on_actionUneWrap_triggered()
{
    QPlainTextEdit::LineWrapMode mode=currentEditor()->lineWrapMode();

    if(mode==QPlainTextEdit::NoWrap){
        currentEditor()->setLineWrapMode(QPlainTextEdit::WidgetWidth);

        ui->actionUneWrap->setChecked(true);
    }else{
        currentEditor()->setLineWrapMode(QPlainTextEdit::NoWrap);

        ui->actionUneWrap->setChecked(false);
    }
}


void MainWindow::on_actionFont_triggered()
{
    bool ok=false;
    QFont font=QFontDialog::getFont(&ok,this);

    if(ok){
        currentEditor()->setFont(font);
    }
}


void MainWindow::on_actionShowToolbar_triggered()
{
    bool visible = ui->toolBar->isVisible();
    ui->toolBar->setVisible(!visible);
    ui->actionShowToolbar->setChecked(!visible);
}


void MainWindow::on_actionShowstatusbar_triggered()
{
    bool visible = ui->statusBar->isVisible();
    ui->statusBar->setVisible(!visible);
    ui->actionShowstatusbar->setChecked(!visible);
}


void MainWindow::on_actionSelectAll_triggered()
{
    currentEditor()->selectAll();
}


void MainWindow::on_actionExit_triggered()
{
    if(userEditConfirmed())
        exit(0);
}


void MainWindow::on_actionFontBackground_triggered()
{

}

void MainWindow::on_actionShowLineNumber_triggered(bool checked)
{
    currentEditor()->HLNA(!checked);
}



mainwindow
--------------------------------------------------
#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>
#include <QLabel>
#include "codeeditor.h"
#include "searchdialog.h"
#include "replacedialog.h"

QT_BEGIN_NAMESPACE
namespace Ui {
class MainWindow;
}
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

private slots:
    void on_hyperlinkActivated(const QUrl &url);

    void on_actionAbout_triggered();

    void on_actionFind_triggered();

    void on_actionReplace_triggered();

    void on_actionNew_triggered();

    void on_actionOpen_triggered();

    void on_actionSave_triggered();

    void on_actionSaveAs_triggered();

    void on_actCut_triggered();

    void on_actionCopy_triggered();

    void on_actionUndo_triggered();

    void on_actionPaste_triggered();

    void on_actionRedo_triggered();

    void on_actionFontColor_triggered();

    void on_actionEditorBackground_triggered();

    void on_actionFontBackground_triggered();

    void on_actionUneWrap_triggered();

    void on_actionFont_triggered();

    void on_actionShowToolbar_triggered();

    void on_actionShowstatusbar_triggered();

    void on_actionSelectAll_triggered();

    void on_actionExit_triggered();

    void on_actionShowLineNumber_triggered(bool checked);

    void on_tabCloseRequested(int index);

    void on_TextChanged();

    void updatePasteAction();

private:
    Ui::MainWindow *ui;
    QTabWidget *tabWidget; // 多标签页容器
    QString filePath;
    QLabel statusCursorLabel;
    QLabel statusLabel;
    bool textchanged;
    bool isDarkTheme; // 添加一个成员变量来跟踪主题状态

    bool userEditConfirmed();
    CodeEditor* currentEditor();
    void updateEditorActions(); // 更新按钮状态
    void switchTheme(); // 添加一个函数来切换主题
};
#endif // MAINWINDOW_H


mainwindow
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>800</width>
    <height>600</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>MainWindow</string>
  </property>
  <widget class="QWidget" name="centralwidget">
   <widget class="QTabWidget" name="tabWidget">
    <property name="geometry">
     <rect>
      <x>0</x>
      <y>0</y>
      <width>800</width>
      <height>600</height>
     </rect>
    </property>
    <property name="currentIndex">
     <number>-1</number>
    </property>
   </widget>
  </widget>
  <widget class="QMenuBar" name="menubar">
   <property name="geometry">
    <rect>
     <x>0</x>
     <y>0</y>
     <width>800</width>
     <height>25</height>
    </rect>
   </property>
   <widget class="QMenu" name="menu_F">
    <property name="title">
     <string>文件(&amp;F)</string>
    </property>
    <addaction name="actionNew"/>
    <addaction name="actionOpen"/>
    <addaction name="actionSave"/>
    <addaction name="actionSaveAs"/>
    <addaction name="actionExit"/>
   </widget>
   <widget class="QMenu" name="menu_E">
    <property name="title">
     <string>编辑(&amp;E)</string>
    </property>
    <addaction name="actionUndo"/>
    <addaction name="actionRedo"/>
    <addaction name="actCut"/>
    <addaction name="actionCopy"/>
    <addaction name="actionPaste"/>
   </widget>
   <widget class="QMenu" name="menu_O">
    <property name="title">
     <string>格式(&amp;O)</string>
    </property>
    <addaction name="actionShowLineNumber"/>
    <addaction name="actionUneWrap"/>
    <addaction name="separator"/>
    <addaction name="actionFont"/>
    <addaction name="actionFontColor"/>
    <addaction name="separator"/>
    <addaction name="actionFontBackground"/>
    <addaction name="actionEditorBackground"/>
   </widget>
   <widget class="QMenu" name="menu_V">
    <property name="title">
     <string>查看(&amp;V)</string>
    </property>
    <addaction name="actionShowToolbar"/>
    <addaction name="actionShowstatusbar"/>
    <addaction name="actionFind"/>
    <addaction name="actionReplace"/>
   </widget>
   <widget class="QMenu" name="menu_H">
    <property name="title">
     <string>帮助(&amp;H)</string>
    </property>
    <addaction name="actionAbout"/>
   </widget>
   <addaction name="menu_F"/>
   <addaction name="menu_E"/>
   <addaction name="menu_O"/>
   <addaction name="menu_V"/>
   <addaction name="menu_H"/>
  </widget>
  <widget class="QToolBar" name="toolBar">
   <property name="windowTitle">
    <string>toolBar</string>
   </property>
   <property name="toolButtonStyle">
    <enum>Qt::ToolButtonStyle::ToolButtonIconOnly</enum>
   </property>
   <attribute name="toolBarArea">
    <enum>TopToolBarArea</enum>
   </attribute>
   <attribute name="toolBarBreak">
    <bool>false</bool>
   </attribute>
   <addaction name="actionNew"/>
   <addaction name="actionOpen"/>
   <addaction name="actionSave"/>
   <addaction name="actionSaveAs"/>
   <addaction name="separator"/>
   <addaction name="actionUndo"/>
   <addaction name="actionRedo"/>
   <addaction name="actCut"/>
   <addaction name="actionCopy"/>
   <addaction name="actionPaste"/>
   <addaction name="separator"/>
   <addaction name="actionFind"/>
   <addaction name="actionReplace"/>
   <addaction name="separator"/>
   <addaction name="actionFont"/>
   <addaction name="actionShowLineNumber"/>
   <addaction name="actionUneWrap"/>
   <addaction name="separator"/>
   <addaction name="actionShowToolbar"/>
   <addaction name="actionShowstatusbar"/>
   <addaction name="actionToggleTheme"/>
  </widget>
  <widget class="QStatusBar" name="statusBar"/>
  <action name="actionNew">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::DocumentNew" resource="img.qrc">
     <normaloff>:/img/new2.bmp</normaloff>
     <normalon>:/img/120.bmp</normalon>:/img/new2.bmp</iconset>
   </property>
   <property name="text">
    <string>新建(N)</string>
   </property>
   <property name="toolTip">
    <string>新建(N)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+N</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::TextHeuristicRole</enum>
   </property>
  </action>
  <action name="actCut">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditCut" resource="img.qrc">
     <normaloff>:/img/cut.bmp</normaloff>:/img/cut.bmp</iconset>
   </property>
   <property name="text">
    <string>剪切(X)</string>
   </property>
   <property name="toolTip">
    <string>剪切(X)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+X</string>
   </property>
  </action>
  <action name="actionExit">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::SystemLogOut" resource="img.qrc">
     <normaloff>:/img/Exit.png</normaloff>:/img/Exit.png</iconset>
   </property>
   <property name="text">
    <string>退出</string>
   </property>
   <property name="toolTip">
    <string>退出</string>
   </property>
  </action>
  <action name="actionSave">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::DocumentSave" resource="img.qrc">
     <normaloff>:/img/Save.png</normaloff>:/img/Save.png</iconset>
   </property>
   <property name="text">
    <string>保存(S)</string>
   </property>
   <property name="toolTip">
    <string>保存</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+S</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::TextHeuristicRole</enum>
   </property>
  </action>
  <action name="actionSaveAs">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::DocumentSaveAs" resource="img.qrc">
     <normaloff>:/img/Saveas.png</normaloff>:/img/Saveas.png</iconset>
   </property>
   <property name="text">
    <string>另存为</string>
   </property>
   <property name="toolTip">
    <string>另存为</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::TextHeuristicRole</enum>
   </property>
  </action>
  <action name="actionUndo">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditUndo"/>
   </property>
   <property name="text">
    <string>撤销(Z)</string>
   </property>
   <property name="toolTip">
    <string>撤销(Z)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Z</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionOpen">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::DocumentOpen"/>
   </property>
   <property name="text">
    <string>打开(O)</string>
   </property>
   <property name="toolTip">
    <string>打开(O)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+O</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionCopy">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditCopy"/>
   </property>
   <property name="text">
    <string>复制(C)</string>
   </property>
   <property name="toolTip">
    <string>复制(C)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+C</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::TextHeuristicRole</enum>
   </property>
  </action>
  <action name="actionPaste">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditPaste"/>
   </property>
   <property name="text">
    <string>粘贴(V)</string>
   </property>
   <property name="toolTip">
    <string>粘贴(V)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+V</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionFind">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::SystemSearch"/>
   </property>
   <property name="text">
    <string>查找(F)</string>
   </property>
   <property name="toolTip">
    <string>查找(F)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+F</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionReplace">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::MediaPlaylistRepeat"/>
   </property>
   <property name="text">
    <string>替换(H)</string>
   </property>
   <property name="toolTip">
    <string>替换(H)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+H</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionFont">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::FormatTextItalic"/>
   </property>
   <property name="text">
    <string>字体</string>
   </property>
   <property name="toolTip">
    <string>字体</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionUneWrap">
   <property name="checkable">
    <bool>true</bool>
   </property>
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::FormatJustifyCenter"/>
   </property>
   <property name="text">
    <string>自动换行</string>
   </property>
   <property name="toolTip">
    <string>自动换行</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionShowToolbar">
   <property name="checkable">
    <bool>true</bool>
   </property>
   <property name="icon">
    <iconset resource="img.qrc">
     <normaloff>:/img/IcOutlineHandyman.png</normaloff>:/img/IcOutlineHandyman.png</iconset>
   </property>
   <property name="text">
    <string>工具栏</string>
   </property>
   <property name="toolTip">
    <string>工具栏</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionShowstatusbar">
   <property name="checkable">
    <bool>true</bool>
   </property>
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::DriveHarddisk"/>
   </property>
   <property name="text">
    <string>状态栏</string>
   </property>
   <property name="toolTip">
    <string>状态栏</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionRedo">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditRedo"/>
   </property>
   <property name="text">
    <string>重做(shift+Z)</string>
   </property>
   <property name="toolTip">
    <string>重做(shift+Z)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+Shift+Z</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionSelectAll">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::EditSelectAll"/>
   </property>
   <property name="text">
    <string>全选(A)</string>
   </property>
   <property name="toolTip">
    <string>全选(A)</string>
   </property>
   <property name="shortcut">
    <string>Ctrl+A</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionAbout">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::HelpAbout"/>
   </property>
   <property name="text">
    <string>关于</string>
   </property>
   <property name="toolTip">
    <string>关于</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionShowLineNumber">
   <property name="checkable">
    <bool>true</bool>
   </property>
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::ListRemove"/>
   </property>
   <property name="text">
    <string>显示行号</string>
   </property>
   <property name="toolTip">
    <string>显示行号</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionFontColor">
   <property name="text">
    <string>字体颜色</string>
   </property>
   <property name="toolTip">
    <string>字体颜色</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionEditorBackground">
   <property name="text">
    <string>编辑器背景色</string>
   </property>
   <property name="toolTip">
    <string>编辑器背景色</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionFontBackground">
   <property name="text">
    <string>字体背景色</string>
   </property>
   <property name="toolTip">
    <string>字体背景色</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
  <action name="actionToggleTheme">
   <property name="icon">
    <iconset theme="QIcon::ThemeIcon::MediaRecord"/>
   </property>
   <property name="text">
    <string>切换深浅色模式</string>
   </property>
   <property name="toolTip">
    <string>切换为深/浅色模式</string>
   </property>
   <property name="menuRole">
    <enum>QAction::MenuRole::NoRole</enum>
   </property>
  </action>
 </widget>
 <resources>
  <include location="img.qrc"/>
 </resources>
 <connections/>
</ui>


pythonhighlighter
--------------------------------------------------

#include "pythonhighlighter.h"

PythonHighlighter::PythonHighlighter(QTextDocument *parent) : QSyntaxHighlighter(parent)
{
    HighlightingRule rule;

    // 关键字格式
    keywordFormat.setForeground(Qt::darkBlue);
    keywordFormat.setFontWeight(QFont::Bold);
    QStringList keywordPatterns;
    keywordPatterns << "\\band\\b" << "\\bas\\b" << "\\bassert\\b"
                    << "\\bbreak\\b" << "\\bclass\\b" << "\\bcontinue\\b"
                    << "\\bdef\\b" << "\\bdel\\b" << "\\belif\\b"
                    << "\\belse\\b" << "\\bexcept\\b" << "\\bexec\\b"
                    << "\\bfinally\\b" << "\\bfor\\b" << "\\bfrom\\b"
                    << "\\bglobal\\b" << "\\bif\\b" << "\\bimport\\b"
                    << "\\bin\\b" << "\\bis\\b" << "\\blambda\\b"
                    << "\\bnot\\b" << "\\bor\\b" << "\\bpass\\b"
                    << "\\bprint\\b" << "\\braise\\b" << "\\breturn\\b"
                    << "\\btry\\b" << "\\bwhile\\b" << "\\bwith\\b"
                    << "\\byield\\b";
    foreach (const QString &pattern, keywordPatterns) {
        rule.pattern = QRegularExpression(pattern);
        rule.format = keywordFormat;
        highlightingRules.append(rule);
    }

    // 类名格式
    classFormat.setFontWeight(QFont::Bold);
    classFormat.setForeground(Qt::darkMagenta);
    rule.pattern = QRegularExpression("\\bclass\\b\\s+([A-Za-z_][A-Za-z0-9_]*)");
    rule.format = classFormat;
    highlightingRules.append(rule);

    // 函数名格式
    functionFormat.setFontItalic(true);
    functionFormat.setForeground(Qt::blue);
    rule.pattern = QRegularExpression("\\bdef\\b\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(");
    rule.format = functionFormat;
    highlightingRules.append(rule);

    // 单行注释格式
    singleLineCommentFormat.setForeground(Qt::red);
    rule.pattern = QRegularExpression("#[^\n]*");
    rule.format = singleLineCommentFormat;
    highlightingRules.append(rule);

    // 字符串格式
    quotationFormat.setForeground(Qt::darkGreen);
    rule.pattern = QRegularExpression("\".*\"");
    rule.format = quotationFormat;
    highlightingRules.append(rule);
}

void PythonHighlighter::highlightBlock(const QString &text)
{
    QRegularExpression urlPattern("(https?://|ftp://|mailto:)[^\\s]+");
    QRegularExpressionMatchIterator matchIterator = urlPattern.globalMatch(text);
    while (matchIterator.hasNext()) {
        QRegularExpressionMatch match = matchIterator.next();
        QTextCharFormat linkFormat;
        linkFormat.setForeground(Qt::blue);
        linkFormat.setFontUnderline(true);
        setFormat(match.capturedStart(), match.capturedLength(), linkFormat);

        // 添加调试输出
        qDebug() << "Hyperlink detected:" << match.captured();
    }
}


pythonhighlighter
--------------------------------------------------
#ifndef PYTHONHIGHLIGHTER_H
#define PYTHONHIGHLIGHTER_H

#include <QSyntaxHighlighter>
#include <QRegularExpression>

class PythonHighlighter : public QSyntaxHighlighter
{
    Q_OBJECT

public:
    PythonHighlighter(QTextDocument *parent = nullptr);

protected:
    void highlightBlock(const QString &text) override;

private:
    struct HighlightingRule
    {
        QRegularExpression pattern;
        QTextCharFormat format;
    };
    QVector<HighlightingRule> highlightingRules;

    QTextCharFormat keywordFormat;
    QTextCharFormat classFormat;
    QTextCharFormat functionFormat;
    QTextCharFormat singleLineCommentFormat;
    QTextCharFormat multiLineCommentFormat;
    QTextCharFormat quotationFormat;
};

#endif // PYTHONHIGHLIGHTER_H


replacedialog
--------------------------------------------------
#include "replacedialog.h"
#include "ui_replacedialog.h"
#include<QMessageBox>

ReplaceDialog::ReplaceDialog(QWidget *parent,QPlainTextEdit *textEdit)
    : QDialog(parent)
    , ui(new Ui::ReplaceDialog)
{
    ui->setupUi(this);

    ptextEdit=textEdit;

    ui->rbDown->setChecked(true);
}

ReplaceDialog::~ReplaceDialog()
{
    delete ui;


}

void ReplaceDialog::on_btFindnext_clicked()
{
    QString target=ui->lineEdit->text();

    if(target==""||ptextEdit==nullptr)
        return;

    QString text=ptextEdit->toPlainText();
    QTextCursor c=ptextEdit->textCursor();
    int index=-1;

    if(ui->rbDown->isChecked()){
        index=text.indexOf(target,c.position(),ui->sen->isChecked()? Qt::CaseSensitive :Qt::CaseInsensitive);
        if(index>=0){
            c.setPosition(index);
            c.setPosition(index+target.length(),QTextCursor::KeepAnchor);

            ptextEdit->setTextCursor(c);
        }
    }else if(ui->rbUp->isChecked()){
        index=text.lastIndexOf(target,c.position()-text.length()-1,ui->sen->isChecked()? Qt::CaseSensitive :Qt::CaseInsensitive);
        if(index>=0){
            c.setPosition(index+target.length());
            c.setPosition(index,QTextCursor::KeepAnchor);

            ptextEdit->setTextCursor(c);
        }
    }

    if(index<0){
        QMessageBox msg(this);
        msg.setWindowTitle("..");
        msg.setText("找不到"+target);
        msg.addButton(QMessageBox::Ok);
        msg.exec();
    }
}


void ReplaceDialog::on_btReplace_clicked()
{
    QString target=ui->lineEdit->text();
    QString to=ui->lineEdit_2->text();

    if((ptextEdit!=nullptr)&&(target!="")&&(to!="")){
        QString selText=ptextEdit->textCursor().selectedText();
        if(selText==target){
            ptextEdit->insertPlainText(to);
        }

        on_btFindnext_clicked();
    }
}


void ReplaceDialog::on_btReplaceAll_clicked()
{
    QString target=ui->lineEdit->text();
    QString to=ui->lineEdit_2->text();

    if((ptextEdit!=nullptr)&&(target!="")&&(to!="")){
        QString text=ptextEdit->toPlainText();
        text.replace(target,to,ui->sen->isChecked()? Qt::CaseSensitive : Qt::CaseInsensitive);
        ptextEdit->clear();
        ptextEdit->setPlainText(text);
    }
}


void ReplaceDialog::on_btCancel_clicked()
{
    accept();
}



replacedialog
--------------------------------------------------
#ifndef REPLACEDIALOG_H
#define REPLACEDIALOG_H

#include <QDialog>
#include <QPlainTextEdit>

namespace Ui {
class ReplaceDialog;
}

class ReplaceDialog : public QDialog
{
    Q_OBJECT

public:
    explicit ReplaceDialog(QWidget *parent = nullptr,QPlainTextEdit *textEdit=nullptr);
    ~ReplaceDialog();

private slots:
    void on_btFindnext_clicked();

    void on_btReplace_clicked();

    void on_btReplaceAll_clicked();

    void on_btCancel_clicked();

private:
    Ui::ReplaceDialog *ui;

    QPlainTextEdit * ptextEdit;
};

#endif // REPLACEDIALOG_H


replacedialog
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>ReplaceDialog</class>
 <widget class="QDialog" name="ReplaceDialog">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>495</width>
    <height>187</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>替换</string>
  </property>
  <property name="windowIcon">
   <iconset theme="QIcon::ThemeIcon::MediaPlaylistRepeat"/>
  </property>
  <layout class="QGridLayout" name="gridLayout">
   <item row="0" column="0">
    <layout class="QVBoxLayout" name="verticalLayout_2">
     <property name="sizeConstraint">
      <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
     </property>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout_2">
       <property name="sizeConstraint">
        <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
       </property>
       <item>
        <widget class="QLabel" name="label">
         <property name="sizePolicy">
          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
         <property name="minimumSize">
          <size>
           <width>100</width>
           <height>20</height>
          </size>
         </property>
         <property name="maximumSize">
          <size>
           <width>100</width>
           <height>20</height>
          </size>
         </property>
         <property name="text">
          <string>查找目标：</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QLineEdit" name="lineEdit"/>
       </item>
      </layout>
     </item>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout">
       <item>
        <widget class="QLabel" name="label_2">
         <property name="sizePolicy">
          <sizepolicy hsizetype="Fixed" vsizetype="Fixed">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
         <property name="minimumSize">
          <size>
           <width>100</width>
           <height>20</height>
          </size>
         </property>
         <property name="maximumSize">
          <size>
           <width>100</width>
           <height>20</height>
          </size>
         </property>
         <property name="text">
          <string>替换为：</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QLineEdit" name="lineEdit_2"/>
       </item>
      </layout>
     </item>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout_3">
       <property name="sizeConstraint">
        <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
       </property>
       <item>
        <widget class="QCheckBox" name="sen">
         <property name="text">
          <string>区分大小写</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QGroupBox" name="groupBox">
         <property name="sizePolicy">
          <sizepolicy hsizetype="Expanding" vsizetype="Expanding">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
         <property name="title">
          <string>方向</string>
         </property>
         <layout class="QGridLayout" name="gridLayout_2">
          <item row="0" column="1">
           <spacer name="verticalSpacer_2">
            <property name="orientation">
             <enum>Qt::Orientation::Vertical</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>20</width>
              <height>40</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="3">
           <widget class="QRadioButton" name="rbUp">
            <property name="text">
             <string>向上(&amp;U)</string>
            </property>
           </widget>
          </item>
          <item row="1" column="1">
           <widget class="QRadioButton" name="rbDown">
            <property name="text">
             <string>向下(&amp;D)</string>
            </property>
           </widget>
          </item>
          <item row="2" column="1">
           <spacer name="verticalSpacer_3">
            <property name="orientation">
             <enum>Qt::Orientation::Vertical</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>20</width>
              <height>40</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="2">
           <spacer name="horizontalSpacer">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="0">
           <spacer name="horizontalSpacer_2">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="4">
           <spacer name="horizontalSpacer_3">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
         </layout>
        </widget>
       </item>
      </layout>
     </item>
    </layout>
   </item>
   <item row="0" column="1">
    <layout class="QVBoxLayout" name="verticalLayout">
     <property name="spacing">
      <number>0</number>
     </property>
     <property name="sizeConstraint">
      <enum>QLayout::SizeConstraint::SetMinimumSize</enum>
     </property>
     <item>
      <widget class="QPushButton" name="btFindnext">
       <property name="sizePolicy">
        <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
         <horstretch>0</horstretch>
         <verstretch>0</verstretch>
        </sizepolicy>
       </property>
       <property name="text">
        <string>查找下一个（&amp;F）</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="verticalSpacer_4">
       <property name="orientation">
        <enum>Qt::Orientation::Vertical</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>20</width>
         <height>40</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QPushButton" name="btReplace">
       <property name="text">
        <string>替换(&amp;R)</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="verticalSpacer_5">
       <property name="orientation">
        <enum>Qt::Orientation::Vertical</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>20</width>
         <height>40</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QPushButton" name="btReplaceAll">
       <property name="text">
        <string>全部替换(&amp;A)</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="verticalSpacer">
       <property name="orientation">
        <enum>Qt::Orientation::Vertical</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>20</width>
         <height>40</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QPushButton" name="btCancel">
       <property name="sizePolicy">
        <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
         <horstretch>0</horstretch>
         <verstretch>0</verstretch>
        </sizepolicy>
       </property>
       <property name="text">
        <string>取消</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections/>
</ui>


searchdialog
--------------------------------------------------
#include "searchdialog.h"
#include "ui_searchdialog.h"
#include <QMessageBox>

SearchDialog::SearchDialog(QWidget *parent,QPlainTextEdit * textEdit)
    : QDialog(parent)
    , ui(new Ui::SearchDialog)
{
    ui->setupUi(this);

    ptextEdit=textEdit;

    ui->rbDown->setChecked(true);
}

SearchDialog::~SearchDialog()
{
    delete ui;
}

void SearchDialog::on_btFindnext_clicked()
{
    QString target=ui->lineEdit->text();

    if(target==""||ptextEdit==nullptr)
        return;

    QString text=ptextEdit->toPlainText();
    QTextCursor c=ptextEdit->textCursor();
    int index=-1;

    if(ui->rbDown->isChecked()){
        index=text.indexOf(target,c.position(),ui->sen->isChecked()? Qt::CaseSensitive :Qt::CaseInsensitive);
        if(index>=0){
            c.setPosition(index);
            c.setPosition(index+target.length(),QTextCursor::KeepAnchor);

            ptextEdit->setTextCursor(c);
        }
    }else if(ui->rbUp->isChecked()){
        index=text.lastIndexOf(target,c.position()-text.length()-1,ui->sen->isChecked()? Qt::CaseSensitive :Qt::CaseInsensitive);
        if(index>=0){
            c.setPosition(index+target.length());
            c.setPosition(index,QTextCursor::KeepAnchor);

            ptextEdit->setTextCursor(c);
        }
    }

    if(index<0){
        QMessageBox msg(this);
        msg.setWindowTitle("..");
        msg.setText("找不到"+target);
        msg.addButton(QMessageBox::Ok);
        msg.exec();
    }
}


void SearchDialog::on_btCancel_clicked()
{
    accept();
}



searchdialog
--------------------------------------------------
#ifndef SEARCHDIALOG_H
#define SEARCHDIALOG_H

#include <QDialog>
#include <QPlainTextEdit>

namespace Ui {
class SearchDialog;
}

class SearchDialog : public QDialog
{
    Q_OBJECT

public:
    explicit SearchDialog(QWidget *parent = nullptr,QPlainTextEdit * textEdit=nullptr);
    ~SearchDialog();

private slots:
    void on_btFindnext_clicked();

    void on_btCancel_clicked();

private:
    Ui::SearchDialog *ui;

    QPlainTextEdit * ptextEdit;
};

#endif // SEARCHDIALOG_H


searchdialog
--------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>SearchDialog</class>
 <widget class="QDialog" name="SearchDialog">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>484</width>
    <height>151</height>
   </rect>
  </property>
  <property name="sizePolicy">
   <sizepolicy hsizetype="Maximum" vsizetype="Preferred">
    <horstretch>0</horstretch>
    <verstretch>0</verstretch>
   </sizepolicy>
  </property>
  <property name="windowTitle">
   <string>查找</string>
  </property>
  <property name="windowIcon">
   <iconset theme="QIcon::ThemeIcon::EditFind"/>
  </property>
  <layout class="QGridLayout" name="gridLayout">
   <item row="0" column="0">
    <layout class="QVBoxLayout" name="verticalLayout_2">
     <property name="sizeConstraint">
      <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
     </property>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout_2">
       <property name="sizeConstraint">
        <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
       </property>
       <item>
        <widget class="QLabel" name="label">
         <property name="text">
          <string>查找目标：</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QLineEdit" name="lineEdit"/>
       </item>
      </layout>
     </item>
     <item>
      <layout class="QHBoxLayout" name="horizontalLayout_3">
       <property name="sizeConstraint">
        <enum>QLayout::SizeConstraint::SetMaximumSize</enum>
       </property>
       <item>
        <widget class="QCheckBox" name="sen">
         <property name="text">
          <string>区分大小写</string>
         </property>
        </widget>
       </item>
       <item>
        <widget class="QGroupBox" name="groupBox">
         <property name="sizePolicy">
          <sizepolicy hsizetype="Expanding" vsizetype="Expanding">
           <horstretch>0</horstretch>
           <verstretch>0</verstretch>
          </sizepolicy>
         </property>
         <property name="title">
          <string>方向</string>
         </property>
         <layout class="QGridLayout" name="gridLayout_2">
          <item row="0" column="1">
           <spacer name="verticalSpacer_2">
            <property name="orientation">
             <enum>Qt::Orientation::Vertical</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>20</width>
              <height>40</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="3">
           <widget class="QRadioButton" name="rbUp">
            <property name="text">
             <string>向上(&amp;U)</string>
            </property>
           </widget>
          </item>
          <item row="1" column="1">
           <widget class="QRadioButton" name="rbDown">
            <property name="text">
             <string>向下(&amp;D)</string>
            </property>
           </widget>
          </item>
          <item row="2" column="1">
           <spacer name="verticalSpacer_3">
            <property name="orientation">
             <enum>Qt::Orientation::Vertical</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>20</width>
              <height>40</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="2">
           <spacer name="horizontalSpacer">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="0">
           <spacer name="horizontalSpacer_2">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
          <item row="1" column="4">
           <spacer name="horizontalSpacer_3">
            <property name="orientation">
             <enum>Qt::Orientation::Horizontal</enum>
            </property>
            <property name="sizeHint" stdset="0">
             <size>
              <width>40</width>
              <height>20</height>
             </size>
            </property>
           </spacer>
          </item>
         </layout>
        </widget>
       </item>
      </layout>
     </item>
    </layout>
   </item>
   <item row="0" column="1">
    <layout class="QVBoxLayout" name="verticalLayout">
     <property name="spacing">
      <number>0</number>
     </property>
     <property name="sizeConstraint">
      <enum>QLayout::SizeConstraint::SetMinimumSize</enum>
     </property>
     <item>
      <widget class="QPushButton" name="btFindnext">
       <property name="sizePolicy">
        <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
         <horstretch>0</horstretch>
         <verstretch>0</verstretch>
        </sizepolicy>
       </property>
       <property name="text">
        <string>查找下一个（&amp;F）</string>
       </property>
      </widget>
     </item>
     <item>
      <spacer name="verticalSpacer">
       <property name="orientation">
        <enum>Qt::Orientation::Vertical</enum>
       </property>
       <property name="sizeType">
        <enum>QSizePolicy::Policy::Fixed</enum>
       </property>
       <property name="sizeHint" stdset="0">
        <size>
         <width>20</width>
         <height>40</height>
        </size>
       </property>
      </spacer>
     </item>
     <item>
      <widget class="QPushButton" name="btCancel">
       <property name="sizePolicy">
        <sizepolicy hsizetype="Preferred" vsizetype="Fixed">
         <horstretch>0</horstretch>
         <verstretch>0</verstretch>
        </sizepolicy>
       </property>
       <property name="text">
        <string>取消</string>
       </property>
      </widget>
     </item>
    </layout>
   </item>
  </layout>
 </widget>
 <resources/>
 <connections/>
</ui>


